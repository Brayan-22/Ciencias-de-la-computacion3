# Generated from MyJava.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,61,441,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,
        1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,
        1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,
        1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
        1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,
        1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,
        1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,
        1,36,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,
        1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,45,1,45,1,46,
        1,46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,
        1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,
        1,51,1,51,1,51,1,52,4,52,359,8,52,11,52,12,52,360,1,53,4,53,364,
        8,53,11,53,12,53,365,1,53,1,53,5,53,370,8,53,10,53,12,53,373,9,53,
        1,54,1,54,1,54,1,54,1,55,1,55,5,55,381,8,55,10,55,12,55,384,9,55,
        1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,397,
        8,56,1,57,1,57,5,57,401,8,57,10,57,12,57,404,9,57,1,58,1,58,1,59,
        1,59,1,60,1,60,1,60,1,60,5,60,414,8,60,10,60,12,60,417,9,60,1,60,
        1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,5,61,428,8,61,10,61,12,61,
        431,9,61,1,61,1,61,1,62,4,62,436,8,62,11,62,12,62,437,1,62,1,62,
        2,382,415,0,63,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,
        44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,
        54,109,55,111,56,113,57,115,58,117,0,119,0,121,59,123,60,125,61,
        1,0,5,1,0,48,57,4,0,36,36,65,90,95,95,97,122,5,0,36,36,48,57,65,
        90,95,95,97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,447,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,
        0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
        0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,
        0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,
        0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,
        0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,
        1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,
        0,125,1,0,0,0,1,127,1,0,0,0,3,135,1,0,0,0,5,142,1,0,0,0,7,148,1,
        0,0,0,9,155,1,0,0,0,11,165,1,0,0,0,13,173,1,0,0,0,15,182,1,0,0,0,
        17,189,1,0,0,0,19,195,1,0,0,0,21,203,1,0,0,0,23,208,1,0,0,0,25,213,
        1,0,0,0,27,219,1,0,0,0,29,223,1,0,0,0,31,228,1,0,0,0,33,234,1,0,
        0,0,35,241,1,0,0,0,37,248,1,0,0,0,39,250,1,0,0,0,41,252,1,0,0,0,
        43,254,1,0,0,0,45,256,1,0,0,0,47,258,1,0,0,0,49,260,1,0,0,0,51,262,
        1,0,0,0,53,264,1,0,0,0,55,266,1,0,0,0,57,268,1,0,0,0,59,270,1,0,
        0,0,61,275,1,0,0,0,63,280,1,0,0,0,65,283,1,0,0,0,67,288,1,0,0,0,
        69,294,1,0,0,0,71,297,1,0,0,0,73,301,1,0,0,0,75,303,1,0,0,0,77,305,
        1,0,0,0,79,308,1,0,0,0,81,311,1,0,0,0,83,314,1,0,0,0,85,317,1,0,
        0,0,87,320,1,0,0,0,89,323,1,0,0,0,91,325,1,0,0,0,93,327,1,0,0,0,
        95,329,1,0,0,0,97,331,1,0,0,0,99,338,1,0,0,0,101,343,1,0,0,0,103,
        351,1,0,0,0,105,358,1,0,0,0,107,363,1,0,0,0,109,374,1,0,0,0,111,
        378,1,0,0,0,113,396,1,0,0,0,115,398,1,0,0,0,117,405,1,0,0,0,119,
        407,1,0,0,0,121,409,1,0,0,0,123,423,1,0,0,0,125,435,1,0,0,0,127,
        128,5,112,0,0,128,129,5,97,0,0,129,130,5,99,0,0,130,131,5,107,0,
        0,131,132,5,97,0,0,132,133,5,103,0,0,133,134,5,101,0,0,134,2,1,0,
        0,0,135,136,5,105,0,0,136,137,5,109,0,0,137,138,5,112,0,0,138,139,
        5,111,0,0,139,140,5,114,0,0,140,141,5,116,0,0,141,4,1,0,0,0,142,
        143,5,99,0,0,143,144,5,108,0,0,144,145,5,97,0,0,145,146,5,115,0,
        0,146,147,5,115,0,0,147,6,1,0,0,0,148,149,5,112,0,0,149,150,5,117,
        0,0,150,151,5,98,0,0,151,152,5,108,0,0,152,153,5,105,0,0,153,154,
        5,99,0,0,154,8,1,0,0,0,155,156,5,112,0,0,156,157,5,114,0,0,157,158,
        5,111,0,0,158,159,5,116,0,0,159,160,5,101,0,0,160,161,5,99,0,0,161,
        162,5,116,0,0,162,163,5,101,0,0,163,164,5,100,0,0,164,10,1,0,0,0,
        165,166,5,112,0,0,166,167,5,114,0,0,167,168,5,105,0,0,168,169,5,
        118,0,0,169,170,5,97,0,0,170,171,5,116,0,0,171,172,5,101,0,0,172,
        12,1,0,0,0,173,174,5,97,0,0,174,175,5,98,0,0,175,176,5,115,0,0,176,
        177,5,116,0,0,177,178,5,114,0,0,178,179,5,97,0,0,179,180,5,99,0,
        0,180,181,5,116,0,0,181,14,1,0,0,0,182,183,5,115,0,0,183,184,5,116,
        0,0,184,185,5,97,0,0,185,186,5,116,0,0,186,187,5,105,0,0,187,188,
        5,99,0,0,188,16,1,0,0,0,189,190,5,102,0,0,190,191,5,105,0,0,191,
        192,5,110,0,0,192,193,5,97,0,0,193,194,5,108,0,0,194,18,1,0,0,0,
        195,196,5,98,0,0,196,197,5,111,0,0,197,198,5,111,0,0,198,199,5,108,
        0,0,199,200,5,101,0,0,200,201,5,97,0,0,201,202,5,110,0,0,202,20,
        1,0,0,0,203,204,5,99,0,0,204,205,5,104,0,0,205,206,5,97,0,0,206,
        207,5,114,0,0,207,22,1,0,0,0,208,209,5,98,0,0,209,210,5,121,0,0,
        210,211,5,116,0,0,211,212,5,101,0,0,212,24,1,0,0,0,213,214,5,115,
        0,0,214,215,5,104,0,0,215,216,5,111,0,0,216,217,5,114,0,0,217,218,
        5,116,0,0,218,26,1,0,0,0,219,220,5,105,0,0,220,221,5,110,0,0,221,
        222,5,116,0,0,222,28,1,0,0,0,223,224,5,108,0,0,224,225,5,111,0,0,
        225,226,5,110,0,0,226,227,5,103,0,0,227,30,1,0,0,0,228,229,5,102,
        0,0,229,230,5,108,0,0,230,231,5,111,0,0,231,232,5,97,0,0,232,233,
        5,116,0,0,233,32,1,0,0,0,234,235,5,100,0,0,235,236,5,111,0,0,236,
        237,5,117,0,0,237,238,5,98,0,0,238,239,5,108,0,0,239,240,5,101,0,
        0,240,34,1,0,0,0,241,242,5,83,0,0,242,243,5,116,0,0,243,244,5,114,
        0,0,244,245,5,105,0,0,245,246,5,110,0,0,246,247,5,103,0,0,247,36,
        1,0,0,0,248,249,5,46,0,0,249,38,1,0,0,0,250,251,5,59,0,0,251,40,
        1,0,0,0,252,253,5,44,0,0,253,42,1,0,0,0,254,255,5,61,0,0,255,44,
        1,0,0,0,256,257,5,123,0,0,257,46,1,0,0,0,258,259,5,125,0,0,259,48,
        1,0,0,0,260,261,5,91,0,0,261,50,1,0,0,0,262,263,5,93,0,0,263,52,
        1,0,0,0,264,265,5,40,0,0,265,54,1,0,0,0,266,267,5,41,0,0,267,56,
        1,0,0,0,268,269,5,58,0,0,269,58,1,0,0,0,270,271,5,118,0,0,271,272,
        5,111,0,0,272,273,5,105,0,0,273,274,5,100,0,0,274,60,1,0,0,0,275,
        276,5,109,0,0,276,277,5,97,0,0,277,278,5,105,0,0,278,279,5,110,0,
        0,279,62,1,0,0,0,280,281,5,105,0,0,281,282,5,102,0,0,282,64,1,0,
        0,0,283,284,5,101,0,0,284,285,5,108,0,0,285,286,5,115,0,0,286,287,
        5,101,0,0,287,66,1,0,0,0,288,289,5,119,0,0,289,290,5,104,0,0,290,
        291,5,105,0,0,291,292,5,108,0,0,292,293,5,101,0,0,293,68,1,0,0,0,
        294,295,5,100,0,0,295,296,5,111,0,0,296,70,1,0,0,0,297,298,5,102,
        0,0,298,299,5,111,0,0,299,300,5,114,0,0,300,72,1,0,0,0,301,302,5,
        62,0,0,302,74,1,0,0,0,303,304,5,60,0,0,304,76,1,0,0,0,305,306,5,
        62,0,0,306,307,5,61,0,0,307,78,1,0,0,0,308,309,5,60,0,0,309,310,
        5,61,0,0,310,80,1,0,0,0,311,312,5,61,0,0,312,313,5,61,0,0,313,82,
        1,0,0,0,314,315,5,33,0,0,315,316,5,61,0,0,316,84,1,0,0,0,317,318,
        5,43,0,0,318,319,5,43,0,0,319,86,1,0,0,0,320,321,5,45,0,0,321,322,
        5,45,0,0,322,88,1,0,0,0,323,324,5,43,0,0,324,90,1,0,0,0,325,326,
        5,45,0,0,326,92,1,0,0,0,327,328,5,42,0,0,328,94,1,0,0,0,329,330,
        5,47,0,0,330,96,1,0,0,0,331,332,5,115,0,0,332,333,5,119,0,0,333,
        334,5,105,0,0,334,335,5,116,0,0,335,336,5,99,0,0,336,337,5,104,0,
        0,337,98,1,0,0,0,338,339,5,99,0,0,339,340,5,97,0,0,340,341,5,115,
        0,0,341,342,5,101,0,0,342,100,1,0,0,0,343,344,5,100,0,0,344,345,
        5,101,0,0,345,346,5,102,0,0,346,347,5,97,0,0,347,348,5,117,0,0,348,
        349,5,108,0,0,349,350,5,116,0,0,350,102,1,0,0,0,351,352,5,98,0,0,
        352,353,5,114,0,0,353,354,5,101,0,0,354,355,5,97,0,0,355,356,5,107,
        0,0,356,104,1,0,0,0,357,359,7,0,0,0,358,357,1,0,0,0,359,360,1,0,
        0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,106,1,0,0,0,362,364,7,0,
        0,0,363,362,1,0,0,0,364,365,1,0,0,0,365,363,1,0,0,0,365,366,1,0,
        0,0,366,367,1,0,0,0,367,371,5,46,0,0,368,370,7,0,0,0,369,368,1,0,
        0,0,370,373,1,0,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,108,1,0,
        0,0,373,371,1,0,0,0,374,375,5,39,0,0,375,376,9,0,0,0,376,377,5,39,
        0,0,377,110,1,0,0,0,378,382,5,34,0,0,379,381,9,0,0,0,380,379,1,0,
        0,0,381,384,1,0,0,0,382,383,1,0,0,0,382,380,1,0,0,0,383,385,1,0,
        0,0,384,382,1,0,0,0,385,386,5,34,0,0,386,112,1,0,0,0,387,388,5,116,
        0,0,388,389,5,114,0,0,389,390,5,117,0,0,390,397,5,101,0,0,391,392,
        5,102,0,0,392,393,5,97,0,0,393,394,5,108,0,0,394,395,5,115,0,0,395,
        397,5,101,0,0,396,387,1,0,0,0,396,391,1,0,0,0,397,114,1,0,0,0,398,
        402,3,117,58,0,399,401,3,119,59,0,400,399,1,0,0,0,401,404,1,0,0,
        0,402,400,1,0,0,0,402,403,1,0,0,0,403,116,1,0,0,0,404,402,1,0,0,
        0,405,406,7,1,0,0,406,118,1,0,0,0,407,408,7,2,0,0,408,120,1,0,0,
        0,409,410,5,47,0,0,410,411,5,42,0,0,411,415,1,0,0,0,412,414,9,0,
        0,0,413,412,1,0,0,0,414,417,1,0,0,0,415,416,1,0,0,0,415,413,1,0,
        0,0,416,418,1,0,0,0,417,415,1,0,0,0,418,419,5,42,0,0,419,420,5,47,
        0,0,420,421,1,0,0,0,421,422,6,60,0,0,422,122,1,0,0,0,423,424,5,47,
        0,0,424,425,5,47,0,0,425,429,1,0,0,0,426,428,8,3,0,0,427,426,1,0,
        0,0,428,431,1,0,0,0,429,427,1,0,0,0,429,430,1,0,0,0,430,432,1,0,
        0,0,431,429,1,0,0,0,432,433,6,61,0,0,433,124,1,0,0,0,434,436,7,4,
        0,0,435,434,1,0,0,0,436,437,1,0,0,0,437,435,1,0,0,0,437,438,1,0,
        0,0,438,439,1,0,0,0,439,440,6,62,1,0,440,126,1,0,0,0,10,0,360,365,
        371,382,396,402,415,429,437,2,0,1,0,6,0,0
    ]

class MyJavaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PACKAGE = 1
    IMPORT = 2
    CLASS = 3
    PUBLIC = 4
    PROTECTED = 5
    PRIVATE = 6
    ABSTRACT = 7
    STATIC = 8
    FINAL = 9
    BOOLEAN = 10
    CHAR = 11
    BYTE = 12
    SHORT = 13
    INT = 14
    LONG = 15
    FLOAT = 16
    DOUBLE = 17
    STRING = 18
    PUNTO = 19
    PUNTOCOMA = 20
    COMA = 21
    IGUAL = 22
    LLAVEIZQ = 23
    LLAVEDER = 24
    CORCHIZQ = 25
    CORCHDER = 26
    PARENIZQ = 27
    PARENDER = 28
    DOSPUNTOS = 29
    VOID = 30
    MAIN = 31
    IF = 32
    ELSE = 33
    WHILE = 34
    DO = 35
    FOR = 36
    MAYOR = 37
    MENOR = 38
    MAYORIGUAL = 39
    MENORIGUAL = 40
    IGUALIGUAL = 41
    DISTINTO = 42
    MASMAS = 43
    MENOSMENOS = 44
    MAS = 45
    MENOS = 46
    ASTERISCO = 47
    DIV = 48
    SWITCH = 49
    CASE = 50
    DEFAULT = 51
    BREAK = 52
    INTEGER_LITERAL = 53
    FLOAT_LITERAL = 54
    CHAR_LITERAL = 55
    STRING_LITERAL = 56
    BOOLEAN_LITERAL = 57
    Identifier = 58
    COMMENT = 59
    LINE_COMMENT = 60
    WS = 61

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'package'", "'import'", "'class'", "'public'", "'protected'", 
            "'private'", "'abstract'", "'static'", "'final'", "'boolean'", 
            "'char'", "'byte'", "'short'", "'int'", "'long'", "'float'", 
            "'double'", "'String'", "'.'", "';'", "','", "'='", "'{'", "'}'", 
            "'['", "']'", "'('", "')'", "':'", "'void'", "'main'", "'if'", 
            "'else'", "'while'", "'do'", "'for'", "'>'", "'<'", "'>='", 
            "'<='", "'=='", "'!='", "'++'", "'--'", "'+'", "'-'", "'*'", 
            "'/'", "'switch'", "'case'", "'default'", "'break'" ]

    symbolicNames = [ "<INVALID>",
            "PACKAGE", "IMPORT", "CLASS", "PUBLIC", "PROTECTED", "PRIVATE", 
            "ABSTRACT", "STATIC", "FINAL", "BOOLEAN", "CHAR", "BYTE", "SHORT", 
            "INT", "LONG", "FLOAT", "DOUBLE", "STRING", "PUNTO", "PUNTOCOMA", 
            "COMA", "IGUAL", "LLAVEIZQ", "LLAVEDER", "CORCHIZQ", "CORCHDER", 
            "PARENIZQ", "PARENDER", "DOSPUNTOS", "VOID", "MAIN", "IF", "ELSE", 
            "WHILE", "DO", "FOR", "MAYOR", "MENOR", "MAYORIGUAL", "MENORIGUAL", 
            "IGUALIGUAL", "DISTINTO", "MASMAS", "MENOSMENOS", "MAS", "MENOS", 
            "ASTERISCO", "DIV", "SWITCH", "CASE", "DEFAULT", "BREAK", "INTEGER_LITERAL", 
            "FLOAT_LITERAL", "CHAR_LITERAL", "STRING_LITERAL", "BOOLEAN_LITERAL", 
            "Identifier", "COMMENT", "LINE_COMMENT", "WS" ]

    ruleNames = [ "PACKAGE", "IMPORT", "CLASS", "PUBLIC", "PROTECTED", "PRIVATE", 
                  "ABSTRACT", "STATIC", "FINAL", "BOOLEAN", "CHAR", "BYTE", 
                  "SHORT", "INT", "LONG", "FLOAT", "DOUBLE", "STRING", "PUNTO", 
                  "PUNTOCOMA", "COMA", "IGUAL", "LLAVEIZQ", "LLAVEDER", 
                  "CORCHIZQ", "CORCHDER", "PARENIZQ", "PARENDER", "DOSPUNTOS", 
                  "VOID", "MAIN", "IF", "ELSE", "WHILE", "DO", "FOR", "MAYOR", 
                  "MENOR", "MAYORIGUAL", "MENORIGUAL", "IGUALIGUAL", "DISTINTO", 
                  "MASMAS", "MENOSMENOS", "MAS", "MENOS", "ASTERISCO", "DIV", 
                  "SWITCH", "CASE", "DEFAULT", "BREAK", "INTEGER_LITERAL", 
                  "FLOAT_LITERAL", "CHAR_LITERAL", "STRING_LITERAL", "BOOLEAN_LITERAL", 
                  "Identifier", "JavaLetter", "JavaLetterOrDigit", "COMMENT", 
                  "LINE_COMMENT", "WS" ]

    grammarFileName = "MyJava.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


